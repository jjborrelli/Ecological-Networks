ggplot(web.props2) + geom_histogram(aes(x = N), binwidth = 5)
ggplot(web.props2) + geom_point(aes(x = N, y = C))
levels(s.ocean2$year[1])
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
so.ode <- as.character(s.ocean$OBSERVATION_DATE_END)
so.ode.split <- strsplit(so.ode, split = "/")
year <- c()
for(i in 1:length(so.ode.split)){
year[i] <- so.ode.split[[i]][3]
}
s.ocean2 <- cbind(s.ocean, year)
m2 <- split(s.ocean2, f = s.ocean2$year)
year.g <- list()
for (i in 1:length(levels(s.ocean2$year))){
el.df <- data.frame(pred = m2[[i]]$PREDATOR_NAME, prey = m2[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
year.g[[i]] <- g
}
i=1
gind <- GenInd(get.adjacency(year.g[[i]], sparse = F))
diam <- diameter(year.g[[i]])
avpath <- average.path.length(year.g[[i]])
cluster <- transitivity(year.g[[i]])
cannibals <- sum(diag(get.adjacency(year.g[[i]], sparse = F)))
degrees <- degree(year.g[[i]], mode = "all")
indegrees <- degree(year.g[[i]], mode = "in")
outdegrees <- degree(year.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(Year = levels(s.ocean2$year[i]), N = gind$N, L = gind$Ltot,
LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props
numBas
numTop
basal
top
int
levels(s.ocean2$year[i])
s.ocean2$year
year
web.props <- data.frame(Year = levels(s.ocean2$year)[i], N = gind$N, L = gind$Ltot,
LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props
