install.packages("xtable")
library(xtable)
?xtable
pops <- data.frame(t = c(2000, 2005, 2010), N.t = c(6.01, 6.50, 6.86))
xtable(pops)
title(xpops) <- "Table1"
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:10,])
digits(tli.table)[c(2,6)] <- 0
print(tli.table,floating=FALSE
)
b <- barabasi.game(25)
library(igraph)
b <- barabasi.game(25)
rglplot(b)
?par3d
?update.packages
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/Current/Resources/library/"))
package_list <- as.character(package_df$Package)
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library/"))
package_list <- as.character(package_df$Package)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
s.ocean <- read.csv("http://esapubs.org/archive/ecol/E092/097/diet.csv")
colnames(s.ocean)
hist(s.ocean$FRACTION_DIET_BY_PREY_ITEMS)
m <- split(s.ocean, f = s.ocean$LOCATION)
x <- c()
for (i in 1:228){
x[i] <- nrow(m[[i]])
}
x
m[[210]]
m[[211]]
matrix(c(m[[211]]$PREDATOR_NAME_ORIGINAL, m[[211]]$PREY_NAME_ORIGINAL,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent <- matrix(c(m[[211]]$PREDATOR_NAME_ORIGINAL, m[[211]]$PREY_NAME_ORIGINAL,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
library(igraph)
plot.igraph(graph.edgelist(tent[,1:2]), layout = layout.circle)
tent.g <- graph.edgelist(tent[,1:2])
tent.g
tent[,1:2]
tent.g <- graph.edgelist(as.character(tent[,1:2]))
tent.g <- graph.edgelist(apply(tent[,1:2], 2, as.character))
tent.g
plot.igraph(tent.g, layout = layout.circle)
tent <- matrix(c(m[[211]]$PREDATOR_COMMON_NAME, m[[211]]$PREDATOR_COMMON_NAME,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent
tent <- matrix(c(m[[211]]$PREDATOR_COMMON_NAME, m[[211]]$PREDATOR_NAME_ORIGINAL,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent.g <- graph.edgelist(apply(tent[,1:2], 2, as.character))
tent.g
tent
tent <- matrix(c(m[[211]]$PREDATOR_COMMON_NAME, m[[211]]$PREY_COMMON_NAME,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent
m[[211]]$PREDATOR_COMMON_NAME
m[[211]]$PREDATOR_COMMON_NAME[1]
tent <- data.frame(c(m[[211]]$PREDATOR_COMMON_NAME, m[[211]]$PREY_COMMON_NAME,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent
tent <- matrix(c(m[[211]]$PREDATOR_COMMON_NAME, m[[211]]$PREY_COMMON_NAME,
m[[211]]$FRACTION_OCCURRENCE), nrow = nrow(m[[211]]), ncol = 3)
tent.g <- graph.edgelist(apply(tent[,1:2], 2, as.character))
plot.igraph(tent.g, layout = layout.circle)
tent <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE))
tent <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
tent
graph.adjacency(tent[,1:2])
graph.adjacency(tent[[,1:2]])
graph.adjacency(as.matrix(tent[,1:2]))
as.matrix(tent[,1:2])
graph.edgelist(as.matrix(tent[,1:2]))
tent.g <- graph.edgelist(as.matrix(tent[,1:2]))
tent.g
plot.igraph(tent.g, layout = layout.circle)
x
m[[191]]
s.sand <- data.frame(pred = m[[191]]$PREDATOR_COMMON_NAME, prey = m[[191]]$PREY_COMMON_NAME,
frac = m[[191]]$FRACTION_OCCURRENCE)
s.sand.g <- graph.edgelist(as.matrix(s.sand[,1:2]))
plot.igraph(s.sand.g, layout = layout.circle)
s.sand
m[[191]]
s.sand <- data.frame(pred = m[[191]]$PREDATOR_NAME_ORIGINAL, prey = m[[191]]$PREY_NAME_ORIGINAL,
frac = m[[191]]$FRACTION_OCCURRENCE)
s.sand.g <- graph.edgelist(as.matrix(s.sand[,1:2]))
plot.igraph(s.sand.g, layout = layout.circle)
s.ocean <- read.csv("http://esapubs.org/archive/ecol/E092/097/diet.csv")
tent <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
tent.g <- graph.edgelist(as.matrix(tent[,1:2]))
plot.igraph(tent.g, layout = layout.circle)
library(igraph)
tent <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
tent.g <- graph.edgelist(as.matrix(tent[,1:2]))
plot.igraph(tent.g, layout = layout.circle)
m <- split(s.ocean, f = s.ocean$LOCATION)
tent <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
tent.g <- graph.edgelist(as.matrix(tent[,1:2]))
plot.igraph(tent.g, layout = layout.circle)
m[[191]]
s.sand <- data.frame(pred = m[[191]]$PREDATOR_NAME_ORIGINAL, prey = m[[191]]$PREY_NAME_ORIGINAL,
frac = m[[191]]$FRACTION_OCCURRENCE)
s.sand.g <- graph.edgelist(as.matrix(s.sand[,1:2]))
plot.igraph(s.sand.g, layout = layout.circle)
location <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
g <- graph.edgelist(as.matrix(tent[,1:2]))
location.g[[i]] <- g
}
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[211]]$PREDATOR_COMMON_NAME, prey = m[[211]]$PREY_COMMON_NAME,
frac = m[[211]]$FRACTION_OCCURRENCE)
g <- graph.edgelist(as.matrix(tent[,1:2]))
location.g[[i]] <- g
}
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_COMMON_NAME, prey = m[[i]]$PREY_COMMON_NAME)
g <- graph.edgelist(as.matrix(tent[,1:2]))
location.g[[i]] <- g
}
location.g
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_COMMON_NAME, prey = m[[i]]$PREY_COMMON_NAME)
g <- graph.edgelist(as.matrix(el.df[,1:2]))
location.g[[i]] <- g
}
location.g
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_COMMON_NAME, prey = m[[i]]$PREY_COMMON_NAME)
g <- graph.edgelist(as.matrix(el.df[,1:2]))
location.g[[i]] <- g
print(i)
}
i = 1
el.df <- data.frame(pred = m[[i]]$PREDATOR_COMMON_NAME, prey = m[[i]]$PREY_COMMON_NAME)
g <- graph.edgelist(as.matrix(el.df[,1:2]))
el.df
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(as.matrix(el.df[,1:2]))
location.g[[i]] <- g
print(i)
}
location.g
levels(s.ocean$OBSERVATION_DATE_END)
levels(factor(s.ocean$OBSERVATION_DATE_END))
length(s.ocean$OBSERVATION_DATE_END)
strsplit(s.ocean$OBSERVATION_DATE_END[1], split = "/")
is.date(s.ocean$OBSERVATION_DATE_END)
?as.date
??as.date
as.Date(s.ocean$OBSERVATION_DATE_END, format = %m/%d/%Y)
as.Date(s.ocean$OBSERVATION_DATE_END, format = "%m/%d/%Y")
str(s.ocean$OBSERVATION_DATE_END)
s.ocean$OBSERVATION_DATE_END[1]
strsplit(s.ocean$OBSERVATION_DATE_END[1], split = "/")
is.character(s.ocean$OBSERVATION_DATE_END)
so.ode <- as.character(s.ocean$OBSERVATION_DATE_END)
strsplit(so.ode[1], split = "/")
strsplit(so.ode[1], split = "/")[3]
strsplit(so.ode[1], split = "/")[[3]]
strsplit(so.ode[1], split = "/")[[1]][3]
strsplit(so.ode[1:5], split = "/")
so.ode.split <- strsplit(so.ode, split = "/")
length(so.ode.split)
head(unlist(so.ode.split))
(unlist(so.ode.split))
so.ode.split
year <- c()
for(i in 1:length(so.ode.split)){
year[i] <- so.ode.split[[i]][3]
}
head(year)
s.ocean2 <- cbind(s.ocean, year)
m2 <- split(s.ocean2, f = s.ocean2$year)
x2 <- c()
for (i in 1:228){
x2[i] <- nrow(m2[[i]])
}
levels(s.ocean2$year)
x2 <- c()
for (i in 1:length(levels(s.ocean2$year))){
x2[i] <- nrow(m2[[i]])
}
x2
year.g <- list()
for (i in 1:length(levels(s.ocean2$year))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(as.matrix(el.df[,1:2]))
year.g[[i]] <- g
print(i)
}
year.g
s.ocean <- read.csv("~/Downloads/diet.csv")
228/3
length(location.g)
par(mfrow = c(3, 76), mar = c(.1,.1,.1,.1))
for (i in 1:228){
plot.igraph(location.g[[i]], layout = layout.circle, edge.arrow.size = .5, vertex.label = NA)
}
location.g[[4]]
s.sand <- data.frame(pred = m[[4]]$PREDATOR_NAME, prey = m[[4]]$PREY_NAME,
frac = m[[4]]$FRACTION_OCCURRENCE)
s.sand.g <- graph.edgelist(as.matrix(s.sand[,1:2]))
plot.igraph(s.sand.g, layout = layout.circle)
dev.off()
plot.igraph(s.sand.g, layout = layout.circle)
s.sand
s.sand.g
s.sand.g <- graph.edgelist(unique(as.matrix(s.sand[,1:2])))
s.sand.g
plot.igraph(s.sand.g, layout = layout.circle)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
print(i)
}
location.g[[4]]
length(location.g)
3*78
228/2
?par
year.g
plot.igraph
?plot.igraph
levels(year)
year
aggregate(year)
levels(s.ocean2$year)
i = 1
plot.igraph(year.g[[i]], layout = layout.circle, edge.arrow.size = .5, vertex.label = NA,
vertex.size = 5)
text(2, 1, label = levels(s.ocean2$year)[i])
text(1, 1, label = levels(s.ocean2$year)[i])
i =1
plot.igraph(year.g[[i]], layout = layout.circle, edge.arrow.size = .5, vertex.label = NA,
vertex.size = 5)
text(0, 0, label = levels(s.ocean2$year)[i], cex = 2)
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOgraph
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
SOadjacency <- get.adjacency(SOgraph)
get_fw_indices(list(SOadjacency), list(SOgraph), web = "SouthernOcean")
SOadjacency <- get.adjacency(SOgraph, sparse = F)
get_fw_indices(list(SOadjacency), list(SOgraph), web = "SouthernOcean")
get_fw_indices
SOindices <- get_fw_indices(list(SOadjacency), list(SOgraph), web = "SouthernOcean")
gind <- GenInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
loops <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
gind
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N[i]) * 100
basal
top
int
numBas
numTop
gind
data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Loops = loops, Bas = basal, Top = top, Int = int)
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Loops = loops, Bas = basal, Top = top, Int = int)
plot.igraph(SOgraph, layout = layout.circle, vertex.label = NA, edge.arrow.size = .5)
plot.igraph(SOgraph, layout = layout.circle, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 5)
tind <- TrophInd(SOadjacency)
head(tind)
hist(tind$TL)
ggplot(tind$TL)
ggplot(tind$TL, geom(histogram))
ggplot(tind$TL, geom_histogram())
qplot(node.props$TL[consumers], binwidth = .8, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
qplot(tind$TL, binwidth = .8, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
qplot(tind$TL, binwidth = .2, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
layouts <- matrix(c(runif(gind$N), tind$TL))
layouts <- matrix(c(runif(gind$N), tind$TL), ncol = 2)
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 5)
par(mar = c(0,0,0,0))
layouts <- matrix(c(runif(gind$N), tind$TL), ncol = 2)
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1)
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
gind <- GenInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
loops <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Loops = loops, Bas = basal, Top = top, Int = int)
print(web.props)
tind <- TrophInd(SOadjacency)
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
layouts <- matrix(c(runif(gind$N), tind$TL), ncol = 2)
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1)
par(mar = c(0,0,0,0))
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1)
text(-1,1, labels = "1")
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1)
?igraph.plotting
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1, rescale = F)
plot.igraph(SOgraph, layout = layouts, vertex.label = NA, edge.arrow.size = .5,
vertex.size = 1)
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
so.ode <- as.character(s.ocean$OBSERVATION_DATE_END)
so.ode.split <- strsplit(so.ode, split = "/")
year <- c()
for(i in 1:length(so.ode.split)){
year[i] <- so.ode.split[[i]][3]
}
s.ocean2 <- cbind(s.ocean, year)
m2 <- split(s.ocean2, f = s.ocean2$year)
year.g <- list()
for (i in 1:length(levels(s.ocean2$year))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
year.g[[i]] <- g
}
?source_url
install.packages(c("gtools", "scatterplot3d"))
print(web.props)
s.ocean$LOCATION
levels(s.ocean$LOCATION)
print(web.props)
?rcauchy
sqrt(94)
cumsum(dnorm(50))
dnorm(50)
?dnorm
?cumsum
?cat
setwd("~/Desktop/GitHub/Ecological-Networks/Food Webs/Rscripts")
source("web_functions.R")
