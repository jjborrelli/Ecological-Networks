el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
r levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
levels(s.ocean$LOCATION)[165]
levels(s.ocean$LOCATION)[53]
levels(s.ocean$LOCATION)[170]
s.ocean$LOCATION
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
levels(s.ocean$LOCATION)[144]
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
?strsplit
strsplit(levels(s.ocean$LOCATION)[144], split = ".")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
as.character(levels(s.ocean$LOCATION)[165])
as.character(levels(s.ocean$LOCATION)[10])
is.character(levels(s.ocean$LOCATION)[10])
levels(s.ocean$LOCATION)
strsplit(levels(s.ocean$LOCATION), split = ".")
as.character(levels(s.ocean$LOCATION)[144])
strsplit(as.character(levels(s.ocean$LOCATION)[144]), split = ".")
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)
h<-levels(s.ocean$LOCATION)
is.character(h)
length(h)
strsplit(h)
strsplit(h, split = "")
h[200]
library(stringr)
x <- "1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(h,x,"")
h
h[228]
?split
?is.string
str_split(h[228],".")
nchar(h[228])
is.character(h[228])
levels(s.ocean$LOCATION)[144]
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
rm(x)
rm(h)
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
gind <- GenInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
cannibals <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal, Top = top, Int = int)
web.props
tind <- TrophInd(SOadjacency)
which(tind$TL == 1)
length(tind$TL)
tind[which(tind$TL == 1),]
tind[which(round(tind$TL) == 1),]
length(tind[which(round(tind$TL) == 1),])
nrow(tind[which(round(tind$TL) == 1),])
177/1095
print(web.props)
names(tind[which(round(tind$TL) == 1),])
rownames(tind[which(round(tind$TL) == 1),])
library(taxize)
specieslist <- rownames(tind[which(round(tind$TL) == 1),])
classification(specieslist, db = "itis")
testclas<- classification(specieslist[1:5], db = "itis")
testclas
library(RCurl)
url <- getURL("https://raw.github.com/bw4sz/IntroR/master/05-DataExploration/Traits.csv")
traits <- read.csv(text = url)
traits
head(traits)
require(ggplot2)
traits <- read.csv(text = url, rownames = 1)
traits <- read.csv(text = url, row.names = 1)
head(traits)
require(ggplot2)
?table
table(traits$Genus~traits$Clade)
table(traits$Genus,traits$Clade)
?range
head(trait)
head(traits)
table(Clade, Genus, data = traits)
table(traits$Clade, traits$Genus)
head(traits)
which.max(traits$Bill)
traits[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
traits[which.max(traits$Bill),]$Clade
traits$Genus[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
source('~/.active-rstudio-document', echo=TRUE)
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit
degrees
degrees <- degree(SOgraph, mode = "all")
degrees
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
dd
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
ggplot(web.props1) + geom_point(aes(x = N, y = C))
ggplot(web.props1) + geom_point(aes(x = N, y = C)) + geom_smooth()
ggplot(web.props1, aes(x = N, y = C)) + geom_point() + geom_smooth()
?geom_smooth
nn[,1]
nn[,1:3]
ggplot(data = nn) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(x = 1:228, y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(aes(x = 1:228, y = nn[1,]))
data.frame(nn[,1:5])
ggplot(data = web.props) + geom_bar(aes(y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas)) +geom_bar(aes(x=1:228, y = Int))
pSO <- permatfull(SOadjacency, fixedmar = "row", mtype = "prab", times = 100)
library(igraph)
library(NetIndices)
library(reshape2)
library(ggplot2)
library(devtools)
library(vegan)
motif.df <- read.table("Tables/motifCOUNTS.csv", header = T, sep = ",", row.names = 1)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
### Import food web data  --------------------------------------------------
inputs <- get_webs("~/Dropbox/Food Web Database/Food_Web/Edgelist")
web.graphs <- inputs$graph.list
web.matrices <- inputs$adjacency.list
webnames <- inputs$webnames
### Set Working Directory     --------------------------------------------------
setwd("~/Desktop/GitHub/Ecological-Networks/Food Webs")
motif.df <- read.table("Tables/motifCOUNTS.csv", header = T, sep = ",", row.names = 1)
motif.df
log(motif.df[,2:14])
boxplot(log(motif.df[,2:14])[,1:2])
boxplot(log(motif.df[,2:14])[,c(1:2, 3:4)])
boxplot(log(motif.df[,2:14])[,c(1:2, 4:5)])
boxplot(if(motif.df > 0){log(motif.df[,2:14])}[,c(1:2, 4:5)])
if(motif.df > 0){log(motif.df[,2:14])}
if(motif.df[,2:14] > 0){log(motif.df[,2:14])}
apply(motif.df[,2:14], 2, FUN = function(x){})
apply(motif.df[,2:14], 2, FUN = function(x){
for(i in 1:length(x)){
if (x[i] > 0){
log(x)
}
}
})
apply(motif.df[,2:14], 2, FUN = function(x){
for(i in 1:length(x)){
if (x[i] > 0){
log(x[i])
}
}
})
apply(motif.df[,2:14], 2, FUN = function(x){
m <- c()
for(i in 1:length(x)){
if (x[i] > 0){
m[i] <- log(x[i])
}
}
})
apply(motif.df[,2:14], 2, FUN = function(x){
m <- c()
for(i in 1:length(x)){
if (x[i] > 0){
m[i] <- log(x[i])
}
}
return(m)
})
apply(motif.df[,2:14], 2, FUN = function(x){
m <- c()
for(i in 1:length(x)){
if (x[i] > 0){
m[i] <- log(x[i])
}
if (x[i] <= 0){
m[i] <- 0
}
}
return(m)
})
logmotifs <- apply(motif.df[,2:14], 2, FUN = function(x){
m <- c()
for(i in 1:length(x)){
if (x[i] > 0){
m[i] <- log(x[i])
}
if (x[i] <= 0){
m[i] <- 0
}
}
return(m)
})
boxplot(logmotifs)
web_permutation
perm.both <- read.csv("Tables/permutedCI_both.csv")
perm.both
system.time(
permutes <- web_permutation(web.matrices, fixedmar = "both", times = 1000)
)
system.time(
permutes.row <- web_permutation(web.matrices, fixedmar = "rows", times = 1000)
)
system.time(
permutes.col <- web_permutation(web.matrices, fixedmar = "columns", times = 1000)
)
permutes.col
par(mfrow = c(4,2), mar = c(.1, .1, .1, .1))
for(i in 1:8){
boxplot(permutes.col[[i]][2:14], ylim = c(0, 1500), main = NA, xlab = NA, ylab = NA)
points(as.numeric(motif.df[i,3:15]), pch = 16, col = "blue")
}
for(i in 1:8){
boxplot(permutes.col[[i]][2:14], ylim = c(0, 1500), main = NA, xlab = NA, ylab = NA)
points(as.numeric(motif.df[i,3:15]), pch = 16, col = "blue")
}
dev.off()
for(i in 1:8){
boxplot(permutes.col[[i]][2:14], ylim = c(0, 1500), main = NA, xlab = NA, ylab = NA)
points(as.numeric(motif.df[i,2:14]), pch = 16, col = "blue")
}
par(mfrow = c(4,2), mar = c(.1, .1, .1, .1))
for(i in 1:8){
boxplot(permutes.col[[i]][2:14], ylim = c(0, 1500), main = NA, xlab = NA, ylab = NA)
points(as.numeric(motif.df[i,2:14]), pch = 16, col = "blue")
}
permint.col <- sapply(permutes.col, FUN = function(x){apply(x[,2:14], 2, quantile, probs = c(0.975, 0.025))})
permint.col
mots <- motif.df[,2:14]
motmeans <- colMeans(mots)
motmeans
points(1:13, log(motmeans), col = "blue", pch = 20, ylim = c(0, 8000))
dev.off()
both.means.low <- rowMeans(log(perm.both[evens, 2:50]))
both.means.high <- rowMeans(log(perm.both[odds, 2:50]))
points(both.means.low, col = "red", pch = 16, typ = "o", lty = 2)
points(both.means.high, col = "red", pch = 16, typ = "o", lty = 2)
both.means.low <- rowMeans(log(perm.col[evens, 2:50]))
permint.col
both.means.low <- rowMeans(log(permint.col[evens, ]))
odds <- seq(1, 25, 2)
evens <- seq(2, 26, 2)
both.means.low <- rowMeans(log(permint.col[evens, ]))
both.means.high <- rowMeans(log(permint.col[odds, ]))
points(both.means.low, col = "red", pch = 16, typ = "o", lty = 2)
points(both.means.high, col = "red", pch = 16, typ = "o", lty = 2)
plot(1:13, log(motmeans), col = "blue", pch = 20, ylim = c(0, 8000))
plot(1:13, log(motmeans), col = "blue", pch = 20) #, ylim = c(0, 8000))
plot(1:13, log(motmeans), col = "blue", pch = 20) , ylim = c(0,10))
plot(1:13, log(motmeans), col = "blue", pch = 20), ylim = c(0,10))
plot(1:13, log(motmeans), col = "blue", pch = 20, ylim = c(0,10))
points(both.means.low, col = "red", pch = 16, typ = "o", lty = 2)
points(both.means.high, col = "red", pch = 16, typ = "o", lty = 2)
both.means.low
both.means.high
permint.both
permutes[[1]]
length(permutes)
boxplot(permutes[[1]])
points(motif.df[1, 2:14])
points(motif.df[1, 2:14])
motif.df[1, 2:14]
boxplot(permutes[[1]][,2:14])
boxplot(log(permutes[[1]][,2:14]))
points(log(motif.df[1, 2:14]))
points(log(motif.df[1, 2:14]), col = "blue")
hist(permutes[[1]][,1])
hist(permutes[[1]][,2])
abline(v = 115)
hist(permutes[[1]][,2], xlim = c(0,120))
abline(v = 115)
quantile(permutes[[1]][,2])
permint.both
permint.both<- sapply(permutes, FUN = function(x){apply(x[,2:14], 2, quantile, probs = c(0.975, 0.025))})
permint.both
perm.both
perm.both <- read.csv("Tables/permutedCI_both.csv", row.names = 1)
perm.both
upper.quant.both <- perm.both[odds,]
upper.quant.both
lower.quant.both <- perm.both[evens,]
motif.df[,2:14]
upper.quant.both <- t(perm.both[odds,])
upper.quant.both
dim(motif.df[,2:14])
dim(upper.quant.both)
motif.df[,2:14] >= upper.quant.both
rowSums(motif.df[,2:14] >= upper.quant.both)
as.numeric(motif.df[,2:14] >= upper.quant.both)
colSums(motif.df[,2:14] >= upper.quant.both)
colSums(motif.df[,2:14] >= upper.quant.both)/50
colSums(motif.df[,2:14] <= lower.quant.both)/50
lower.quant.both <- t(perm.both[evens,])
colSums(motif.df[,2:14] <= lower.quant.both)/50
plot(colSums(motif.df[,2:14] >= upper.quant.both)/50)
upper.quant.row <- t(perm.row[odds,])
lower.quant.row <- t(perm.row[evens,])
colSums(motif.df[,2:14] >= upper.quant.row) / 50
colSums(motif.df[,2:14] <= lower.quant.row) / 50
perm.row <- read.csv("Tables/permutedCI_row.csv", row.names = 1)
upper.quant.row <- t(perm.row[odds,])
lower.quant.row <- t(perm.row[evens,])
colSums(motif.df[,2:14] >= upper.quant.row) / 50
colSums(motif.df[,2:14] <= lower.quant.row) / 50
perm.col <- read.csv("Tables/permutedCI_col.csv", row.names = 1)
upper.quant.col <- t(perm.col[odds,])
lower.quant.col <- t(perm.col[evens,])
colSums(motif.df[,2:14] >= upper.quant.col) / 50
colSums(motif.df[,2:14] <= lower.quant.col) / 50
permutes[[1]]
pb.means <- sapply(permutes, FUN = function(x){apply(x[,2:14], 2, colMeans)})
pb.means <- sapply(permutes, FUN = function(x){apply(x[,2:14], 2, mean)})
pb.means
pb.means <- t(sapply(permutes, FUN = function(x){apply(x[,2:14], 2, mean)}))
pb.means
sub.counts <- motif.df[,2:14]
sub.counts
sub.counts - pb.means
pb.sd <- t(sapply(permutes, FUN = function(x){apply(x[,2:14], 2, sd)}))
(sub.counts - pb.means) / pb.sd
colMeans((sub.counts - pb.means) / pb.sd)
plot(colMeans((sub.counts - pb.means) / pb.sd))
plot(colMeans((sub.counts - pb.means) / pb.sd, na.rm = T))
(sub.counts - pb.means) / pb.sd
z.b <- (sub.counts - pb.means) / pb.sd
z.b$s1
hist(z.b$s1)
mean(z.b$s1) - sqrt(var(z.b$s1)/50)
mean(z.b$s1) + sqrt(var(z.b$s1)/50)
mean(z.b$s1)
plot(colMeans(z.b, na.rm = T))
apply(z.b, 2, FUN = function(x){sqrt(var(x)/length(x))})
apply(z.b, 2, FUN = function(x){sqrt(var(x)/length(x))}, na.rm = T)
apply(z.b, 2, na.rm = T, FUN = function(x){sqrt(var(x)/length(x))})
apply(z.b, 2, na.rm = T, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
apply(z.b, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
se.zb <- apply(z.b, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
z.b
z.bmean <- colMeans(z.b, na.rm = T)
z.bmean
z.high.b <- zbmean + se.zb
z.low.b <- zbmean - se.zb
z.high.b <- z.bmean + se.zb
z.low.b <- z.bmean - se.zb
plot(z.bmean)
plot(z.bmean, ylim = c(-5, 15))
points(z.high.b, col = "blue", pch = 21)
points(z.high.b, col = "blue", pch = 16)
?segment
points(z.low.b, col = "blue", pch = 16)
abline(h = 0)
plot(z.bmean, ylim = c(-5, 15))
points(z.high.b, col = "blue", pch = 16)
points(z.low.b, col = "blue", pch = 16)
abline(h = 0, lty = 2)
pr.means <- t(sapply(permutes, FUN = function(x){apply(x[,2:14], 2, mean)}))
pr.sd <- t(sapply(permutes, FUN = function(x){apply(x[,2:14], 2, sd)}))
z.r <- (sub.counts - pr.means) / pr.sd
mean(z.r$s1) + sqrt(var(z.r$s1)/50)
se.zr <- apply(z.r, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
z.rmean <- colMeans(z.r, na.rm = T)
z.high.r <- z.rmean + se.zr
z.low.r <- z.rmean - se.zr
plot(z.rmean, ylim = c(-5, 15))
points(z.high.r, col = "blue", pch = 16)
points(z.low.r, col = "blue", pch = 16)
abline(h = 0, lty = 2)
pr.means <- t(sapply(permutes.row, FUN = function(x){apply(x[,2:14], 2, mean)}))
pr.sd <- t(sapply(permutes.row, FUN = function(x){apply(x[,2:14], 2, sd)}))
z.r <- (sub.counts - pr.means) / pr.sd
mean(z.r$s1) + sqrt(var(z.r$s1)/50)
se.zr <- apply(z.r, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
z.rmean <- colMeans(z.r, na.rm = T)
z.high.r <- z.rmean + se.zr
z.low.r <- z.rmean - se.zr
plot(z.rmean, ylim = c(-5, 15))
plot(z.rmean, ylim = c(-15, 15))
plot(z.rmean, ylim = c(-10, 10))
points(z.high.r, col = "blue", pch = 16)
points(z.low.r, col = "blue", pch = 16)
abline(h = 0, lty = 2)
pc.means <- t(sapply(permutes.col, FUN = function(x){apply(x[,2:14], 2, mean)}))
pc.sd <- t(sapply(permutes.col, FUN = function(x){apply(x[,2:14], 2, sd)}))
z.r <- (sub.counts - pc.means) / pc.sd
mean(z.c$s1) + sqrt(var(z.c$s1)/50)
se.zc <- apply(z.c, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
z.cmean <- colMeans(z.c, na.rm = T)
z.high.c <- z.cmean + se.zc
z.low.c <- z.cmean - se.zc
plot(z.cmean, ylim = c(-10, 10))
points(z.high.c, col = "blue", pch = 16)
points(z.low.c, col = "blue", pch = 16)
abline(h = 0, lty = 2)
pc.means <- t(sapply(permutes.col, FUN = function(x){apply(x[,2:14], 2, mean)}))
pc.sd <- t(sapply(permutes.col, FUN = function(x){apply(x[,2:14], 2, sd)}))
z.c <- (sub.counts - pc.means) / pc.sd
mean(z.c$s1) + sqrt(var(z.c$s1)/50)
se.zc <- apply(z.c, 2, FUN = function(x){sqrt(var(x[!is.na(x)])/length(x))})
z.cmean <- colMeans(z.c, na.rm = T)
z.high.c <- z.cmean + se.zc
z.low.c <- z.cmean - se.zc
plot(z.cmean, ylim = c(-10, 10))
points(z.high.c, col = "blue", pch = 16)
points(z.low.c, col = "blue", pch = 16)
abline(h = 0, lty = 2)
fw.indices
fw.indices <- read.csv("Tables/FWindices.csv", row.names = 1)
fw.indices
?erdos.renyi.game
erdos.renyi.game(fw.indices[1,1], fw.indices[1,2], "gnm", directed =TRUE)
N <- fw.indices$N
L <- fw.indices$Ltot
erdos.renyi.game(N, L, "gnm", directed = TRUE)
N
erg <- erdos.renyi.game(N, L, "gnm", directed = TRUE)
erg2 <- erdos.renyi.game(N, L, "gnm", directed = TRUE)
motif_counter(list(erg, erg2), webs = c("erg", "erg2"))
sub.counts[1,]
erg <- list()
for(i in 1:100){
erg[[i]] <-  erdos.renyi.game(N[1], L[1], "gnm", directed = TRUE)
}
motif_counter(erg, webs = 1:100)
boxplot(motif_counter(erg, webs = 1:100)[,2:14])
points(sub.counts[1,])
sub.counts[1,]
boxplot(motif_counter(erg, webs = 1:100)[,2:14])
erg <- list()
for(i in 1:10000){
erg[[i]] <-  erdos.renyi.game(N[1], L[1], "gnm", directed = TRUE)
}
boxplot(motif_counter(erg, webs = 1:100)[,2:14])
plot(z.cmean, ylim = c(-10, 10))
merg <- motif_counter(erg, webs = 1:100)[,2:14]
cmerg <- colMeans(merg)
cmerg
csdmerg <- apply(merg, 2, sd)
(sub.counts - cmerg) / csdmerg
(sub.counts[1,] - cmerg) / csdmerg
sqrt(var(merg[,1])/50)
erg <- list()
for(i in 1:10000){
erg[[i]] <-  erdos.renyi.game(N[1], L[1], "gnm", directed = TRUE, loops = TRUE)
}
merg <- motif_counter(erg, webs = 1:100)[,2:14]
cmerg <- colMeans(merg)
csdmerg <- apply(merg, 2, sd)
(sub.counts[1,] - cmerg) / csdmerg
sqrt(var(merg[,2])/50)
sqrt(var(merg[,3])/50)
sqrt(var(merg[,4])/50)
