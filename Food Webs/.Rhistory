g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
levels(s.ocean$LOCATION)
for (i in 1){
plot.igraph(location.g[[i]], layout = layout.circle, edge.arrow.size = .5, vertex.label = NA,
vertex.size = 5)
text(0, 0, label = levels(s.ocean$LOCATION)[i], cex = .75)
}
i = 1
text(0, 0, label = levels(s.ocean$LOCATION)[i], cex = .75)
levels(s.ocean$LOCATION)[i]
levels(s.ocean$LOCATION)
i = 2
plot.igraph(location.g[[i]], layout = layout.circle, edge.arrow.size = .5, vertex.label = NA,
vertex.size = 5)
text(0, 0, label = levels(s.ocean$LOCATION)[i], cex = .75)
text(0, 0, label = levels(s.ocean$LOCATION)[i], cex = .5)
rm(i)
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
gind <- GenInd(SOadjacency)
tind <- TrophInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
loops <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Loops = loops, Bas = basal, Top = top, Int = int)
print(web.props)
degrees
hist(degrees)
hist(indegrees)
hist(outdegrees)
hist(degrees)
points(dlnorm(1:250))
hist(degrees, freq = F)
points(dlnorm(1:250))
points(dlnorm(1:250, 1))
fitdistr(degrees, "lognormal")
points(dlnorm(1:250, 1.7054, 1.60920))
hist(degrees, freq = F)
points(dlnorm(1:250, 1.705482, 1.60920), typ = "l", col = "red")
hist(degrees, freq = F, breaks = 20)
points(dlnorm(1:250, 1.705482, 1.60920), typ = "l", col = "red")
hist(degrees, freq = F, breaks = 25)
hist(degrees, freq = F, breaks = 30)
points(dlnorm(1:250, 1.705482, 1.60920), typ = "l", col = "red")
hist(degrees, freq = F, breaks = 15)
points(dlnorm(1:250, 1.705482, 1.60920), typ = "l", col = "red")
power.law.fit(degree)
is.numeric(degrees)
power.law.fit(degrees)
?power.law.fit
power.law.fit(degrees, force.continuous = T)
points((1:200)^-2.739, typ = "l", col = "blue")
points(10*(1:200)^-2.739, typ = "l", col = "blue")
ggplot(degree, geom = "histogram")
ggplot(degrees, geom = "histogram")
ggplot(. ~ degrees, geom = "histogram")
ggplot(data = degrees, geom = "histogram")
ggplot(data = data.frame(degrees = degrees), geom = "histogram")
ggplot(degrees, data = data.frame(degrees = degrees), geom = "histogram")
ggplot(data = data.frame(degrees = degrees), geom_hist(aes = degree))
qplot(degrees, geom = "histogram")
qplot(degrees, geom = "histogram", density = T)
qplot(degrees, geom = "density")
qplot(degrees, geom = "density", fill = T)
qplot(degrees, geom = "density", fill = "black")
qplot(degrees, geom = "histogram")
qplot(degrees, geom = "histogram") + geom_line(aes(y = dlnorm(1:250, 1.705482, 1.60920)))
qplot(degrees, geom = "histogram") + geom_line(aes(x = dlnorm(1:250, 1.705482, 1.60920)))
length(degrees)
qplot(degrees, geom = "density") + geom_line(aes(x = dlnorm(1:250, 1.705482, 1.60920)))
qplot(degrees, geom = "density") + geom_line(aes(y = dlnorm(1:250, 1.705482, 1.60920)))
qplot(degrees, geom = "density") + geom_line(aes(x = 1:250, y = dlnorm(1:250, 1.705482, 1.60920)))
qplot(degrees, geom = "hist") + geom_line(aes(x = 1:250, y = dlnorm(1:250, 1.705482, 1.60920)))
qplot(degrees, geom = "histogram") + geom_line(aes(x = 1:250, y = dlnorm(1:250, 1.705482, 1.60920)))
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white")
test
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
test + geom_line(aes(x = 1:250, y = dlnorm(1:250, 1.705482, 1.60920)))
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test + geom_line(aes(x = 1:250, y = dlnorm(1:250, 1.705482, 1.60920)))
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
test + geom_line(aes(x = 1:1095, y = dlnorm(1:1095, 1.705482, 1.60920)))
test + geom_line(aes(x = 1:1095, y = dlnorm(1:1095, 1.705482, 1.60920)), colour = "blue")
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_line(aes(x = 1:1095, y = dlnorm(1:1095, 1.705482, 1.60920)), colour = "blue")
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
length(seq(1, 250, .3))
length(seq(1, 250, .2))
length(seq(1, 250, .25))
length(seq(1, 250, .2))
seq <- seq(1, 250, .2)
sequ <- seq(1, 250, .2)
rm(seq)
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_line(aes(x = seq, y = dlnorm(seq, 1.705482, 1.60920)), colour = "blue")
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_line(aes(x = sequ, y = dlnorm(sequ, 1.705482, 1.60920)), colour = "blue")
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_line(aes(x = sequ[1:1095], y = dlnorm(sequ[1:1095], 1.705482, 1.60920)), colour = "blue")
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test <- test + geom_line(aes(x = sequ[1:1095], y = dlnorm(sequ[1:1095], 1.705482, 1.60920)),
colour = "blue")
test
sequ <- seq(1, 300, .2)
length(sequ)
sequ <- seq(1, 300, .5)
length(sequ)
sequ <- seq(1, 300, .25)
length(sequ)
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test <- test + geom_line(aes(x = sequ[1:1095], y = dlnorm(sequ[1:1095], 1.705482, 1.60920)),
colour = "blue")
test
degdisfit <- fitdistr(degrees, "lognormal")
degdisfit
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green")
)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]], degdisfit[[2]])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
sequ[1:1095] ^ -degdispow$alpha
degdisfit[[1]]
degdisfit[[2]]))
degdisfit[[meanlog]]
degdisfit[["meanlog"]]
degdisfit$sdlog
degdisfit
degdisfit[[1]][1]
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"),
xlim = c(0,.25))
dd
dd + scale_y_continuous(limits = c(0, 0.25))
dd + scale_y_continuous(limits = c(0, 0.15))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 10*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 25*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 25*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
for (i in 1:228){
gind <- GenInd(get.adjacency(location.g[[i]]))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]])))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- rbind(web.props1, web.props)
}
print(web.props1)
i=1
gind <- GenInd(get.adjacency(location.g[[i]]))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]])))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- data.frame()
for (i in 1:228){
gind <- GenInd(get.adjacency(location.g[[i]], sparse = F))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]], sparse = F)))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- rbind(web.props1, web.props)
}
print(web.props1)
hist(web.props1$N)
hist(web.props1$C)
plot(web.props$N, web.props$C)
web.props$N
1
plot(web.props1$N, web.props1$C)
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)])
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(0, 250))
abline(v=10)
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = seq(10, 250, 10))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250), xlab = "N", ylab = "C")
hist(web.props1$C)
hist(web.props1$N)
hist(web.props1$N, breaks = seq(0, 250, 10))
plot(log(web.props1$N[which(web.props1$N > 10)]), web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250), xlab = "N", ylab = "C")
plot(log(web.props1$N[which(web.props1$N > 10)]), web.props1$C[which(web.props1$N > 10)], xlab = "N", ylab = "C")
lm(web.props1$C[which(web.props1$N > 10)]~log(web.props1$N[which(web.props1$N > 10)]))
ggplot(web.props1, geom_hist(aes(x = N)))
ggplot(web.props1, geom_histogram(aes(x = N)))
ggplot(web.props1) +geom_histogram(aes(x = N))
ggplot(web.props1) + geom_histogram(aes(x = N), binwidth = 5)
ggplot(web.props1, aes(x = web.props1$N[which(web.props1$N > 10)], y = web.props1$C[which(web.props1$N > 10)]))
ggplot(web.props1, aes(x = N[which(web.props1$N > 10)], y = C[which(web.props1$N > 10)]))
ggplot(web.props1, aes(x = N, y = C))
ggplot(web.props1) + geom_point(aes(x = N, y = C))
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
degrees <- degree(SOgraph, mode = "all")
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
dd
fitdistr(degrees, "poisson")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98)#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98))#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98)),#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dpois(sequ[1:1095], 18.98)
fitdistr(degrees, "poisson")
hist(degrees, freq = F)
points(dpois(1:250, 18.986), typ = "l")
?dpois
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
r levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
levels(s.ocean$LOCATION)[165]
levels(s.ocean$LOCATION)[53]
levels(s.ocean$LOCATION)[170]
s.ocean$LOCATION
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
levels(s.ocean$LOCATION)[144]
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
?strsplit
strsplit(levels(s.ocean$LOCATION)[144], split = ".")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
as.character(levels(s.ocean$LOCATION)[165])
as.character(levels(s.ocean$LOCATION)[10])
is.character(levels(s.ocean$LOCATION)[10])
levels(s.ocean$LOCATION)
strsplit(levels(s.ocean$LOCATION), split = ".")
as.character(levels(s.ocean$LOCATION)[144])
strsplit(as.character(levels(s.ocean$LOCATION)[144]), split = ".")
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)
h<-levels(s.ocean$LOCATION)
is.character(h)
length(h)
strsplit(h)
strsplit(h, split = "")
h[200]
library(stringr)
x <- "1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(h,x,"")
h
h[228]
?split
?is.string
str_split(h[228],".")
nchar(h[228])
is.character(h[228])
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[176]
levels(s.ocean$LOCATION)[10]
levels(s.ocean$LOCATION)[5]
levels(s.ocean$LOCATION)[165]
levels(s.ocean$LOCATION)[53]
levels(s.ocean$LOCATION)[170]
ggplot(web.props1) + geom_histogram(aes(x = N), binwidth = 5)
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
web.props1 <- data.frame()
for (i in 1:228){
gind <- GenInd(get.adjacency(location.g[[i]], sparse = F))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]], sparse = F)))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- rbind(web.props1, web.props)
}
print(web.props1)
ggplot(web.props1) + geom_histogram(aes(x = N), binwidth = 5)
ggplot(web.props1) + geom_point(aes(x = N, y = C))
ggplot(web.props1, aes(x = 1:228, y = 100, fill = c(Bas, Int, Top)) + geom_bar(stat = 100)
ggplot(web.props1, aes(x = 1:228, y = 100, fill = c(Bas, Int, Top))) + geom_bar(stat = 100)
ggplot(web.props1, aes(y = 100, fill = c(Bas, Int, Top))) + geom_bar(stat = 100)
ggplot(web.props1, aes(y = c(Bas, Int, Top), fill = c(Bas, Int, Top))) + geom_bar(stat = 100)
nn<- matrix(c(t(web.props$Bas), t(web.props$Int), t(web.props$Top)), nrow = 228, ncol = 3, byrow = T)
nn
nn<- matrix(c(t(web.props$Bas), t(web.props$Int), t(web.props$Top)), nrow = 3, ncol = 228, byrow = T)
nn
barplot(nn)
colnames(nn) <- as.character(1:228)
barplot(nn)
nn<- matrix(c(t(web.props$Bas), t(web.props$Int), t(web.props$Top)), nrow = 3, ncol = 228)
barplot(nn)
barplot(nn[,1:5])
nn[,1:5]
nn<- matrix(c(web.props$Bas, web.props$Int, web.props$Top), nrow = 3, ncol = 228)
colnames(nn) <- as.character(1:228)
barplot(nn[,1:5])
head(web.props1)
nn<- matrix(c(web.props$Bas, web.props$Int, web.props$Top), nrow = 3, ncol = 228, byrow = T)
colnames(nn) <- as.character(1:228)
barplot(nn[,1:5])
nn[,1:5]
web.props$Bas
nn<- matrix(c(web.props1$Bas, web.props1$Int, web.props1$Top), nrow = 3, ncol = 228, byrow = T)
colnames(nn) <- as.character(1:228)
barplot(nn[,1:5])
barplot(nn)
barplot(nn, color = c("blue", "green", "yellow"))
barplot(nn, col = c("blue", "green", "yellow"))
nn[,1:3]
head(web.props1)
barplot(nn[,1:10], col = c("blue", "yellow", "green"))
barplot(nn[,1:10], col = c("blue", "yellow", "darkgreen"))
library(knitr)
getwd()
pandoc("~/Desktop/GitHub/Ecological-Networks/Food Webs/s_oceanREPORT.md", format = "latex")
pandoc("~/Desktop/GitHub/Ecological-Networks/Food Webs/s_oceanREPORT.md", format = "latex")
setwd("~/Desktop/GitHub/Ecological-Networks/Food Webs/")
pandoc("s_oceanREPORT.md", format = "latex")
pandoc("s_oceanREPORT.md", format = "latex")
pandoc("s_oceanREPORT.md", format = "latex")
setwd("~/Dropbox/Biometry 2014/Datasets for PS/diabetes.csv")
