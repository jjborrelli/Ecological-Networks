dpois(sequ[1:1095], 18.98)
fitdistr(degrees, "poisson")
hist(degrees, freq = F)
points(dpois(1:250, 18.986), typ = "l")
?dpois
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
r levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
levels(s.ocean$LOCATION)[165]
levels(s.ocean$LOCATION)[53]
levels(s.ocean$LOCATION)[170]
s.ocean$LOCATION
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
levels(s.ocean$LOCATION)[144]
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
?strsplit
strsplit(levels(s.ocean$LOCATION)[144], split = ".")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
as.character(levels(s.ocean$LOCATION)[165])
as.character(levels(s.ocean$LOCATION)[10])
is.character(levels(s.ocean$LOCATION)[10])
levels(s.ocean$LOCATION)
strsplit(levels(s.ocean$LOCATION), split = ".")
as.character(levels(s.ocean$LOCATION)[144])
strsplit(as.character(levels(s.ocean$LOCATION)[144]), split = ".")
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)
h<-levels(s.ocean$LOCATION)
is.character(h)
length(h)
strsplit(h)
strsplit(h, split = "")
h[200]
library(stringr)
x <- "1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(h,x,"")
h
h[228]
?split
?is.string
str_split(h[228],".")
nchar(h[228])
is.character(h[228])
levels(s.ocean$LOCATION)[144]
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
rm(x)
rm(h)
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
gind <- GenInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
cannibals <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal, Top = top, Int = int)
web.props
tind <- TrophInd(SOadjacency)
which(tind$TL == 1)
length(tind$TL)
tind[which(tind$TL == 1),]
tind[which(round(tind$TL) == 1),]
length(tind[which(round(tind$TL) == 1),])
nrow(tind[which(round(tind$TL) == 1),])
177/1095
print(web.props)
names(tind[which(round(tind$TL) == 1),])
rownames(tind[which(round(tind$TL) == 1),])
library(taxize)
specieslist <- rownames(tind[which(round(tind$TL) == 1),])
classification(specieslist, db = "itis")
testclas<- classification(specieslist[1:5], db = "itis")
testclas
library(RCurl)
url <- getURL("https://raw.github.com/bw4sz/IntroR/master/05-DataExploration/Traits.csv")
traits <- read.csv(text = url)
traits
head(traits)
require(ggplot2)
traits <- read.csv(text = url, rownames = 1)
traits <- read.csv(text = url, row.names = 1)
head(traits)
require(ggplot2)
?table
table(traits$Genus~traits$Clade)
table(traits$Genus,traits$Clade)
?range
head(trait)
head(traits)
table(Clade, Genus, data = traits)
table(traits$Clade, traits$Genus)
head(traits)
which.max(traits$Bill)
traits[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
traits[which.max(traits$Bill),]$Clade
traits$Genus[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
source('~/.active-rstudio-document', echo=TRUE)
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit
degrees
degrees <- degree(SOgraph, mode = "all")
degrees
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
dd
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
ggplot(web.props1) + geom_point(aes(x = N, y = C))
ggplot(web.props1) + geom_point(aes(x = N, y = C)) + geom_smooth()
ggplot(web.props1, aes(x = N, y = C)) + geom_point() + geom_smooth()
?geom_smooth
nn[,1]
nn[,1:3]
ggplot(data = nn) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(x = 1:228, y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(aes(x = 1:228, y = nn[1,]))
data.frame(nn[,1:5])
ggplot(data = web.props) + geom_bar(aes(y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas)) +geom_bar(aes(x=1:228, y = Int))
pSO <- permatfull(SOadjacency, fixedmar = "row", mtype = "prab", times = 100)
?t.test
?prop.test
??wald
??score
?prop.test
prop.CI = function(p, n, alpha = 0.05, digits = 3, method = "likelihood") {
# Asymptotic (or Wald) interval:
z = qnorm(1 - alpha/2)
if (method == "asymptotic") {
se = sqrt(p * (1 - p)/n)
CI = list(p = p, CI = c((p - z * se), (p + z * se)), n = n, level = 1 -
alpha, method = method)
}
# Asymptotic (or Wald-test) CIs with continuity correction:
if (method == "asymptotic.cc") {
se = sqrt(p * (1 - p)/n)
CI = list(p = p, CI = c((p - z * se - 1/(2 * n)), (p + z * se + 1/(2 *
n))), n = n, level = 1 - alpha, method = method)
}
# Score test (or Wilson) interval:
if (method == "score") {
term1 = 2 * n * p + z^2
term2 = z * sqrt(z^2 + 4 * n * p * (1 - p))
term3 = 2 * (n + z^2)
CI = list(p = p, CI = c((term1 - term2)/term3, (term1 + term2)/term3),
n = n, level = 1 - alpha, method = method)
}
# Score test (or Wilson) interval with continuity correction:
if (method == "score.cc") {
term1 = 2 * n * p + z^2
if (p > 0) {
term2L = z * sqrt(z^2 - 2 - 1/n + 4 * p * (n * (1 - p) + 1))
}
if (p < 1) {
term2U = z * sqrt(z^2 + 2 - 1/n + 4 * p * (n * (1 - p) - 1))
}
term3 = 2 * (n + z^2)
if ((p > 0) & (p < 1)) {
CI = list(p = p, CI = c((term1 - 1 - term2L)/term3, (term1 + 1 +
term2U)/term3), n = n, level = 1 - alpha, method = method)
}
if (p == 0) {
CI = list(p = p, CI = c(0, CIU = (term1 + 1 + term2U)/term3), n = n,
level = 1 - alpha, method = method)
}
if (p == 1) {
CI = list(p = p, CI = c((term1 - 1 - term2L)/term3, 1), n = n, level = 1 -
alpha, method = method)
}
}
# Binomial ('exact' or Clopper-Pearson) interval:
if (method == "binomial") {
conf.int = binom.test(round(p * n), n, conf.level = 1 - alpha)$conf.int
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Binomial mid-p quasi-exact interval:
if (method == "binomial.midp") {
x = round(p * n)
uplim = 1
lowlim = 0
if (x == 0)
uplim = 1 - alpha^(1/n)
if (x == n)
lowlim = alpha^(1/n)
if (x > 0 & x < n) {
pp = seq(1e-06, 0.999999, length = 1e+05)
a2 = 0.5 * pbinom(x - 1, n, pp) + 0.5 * pbinom(x, n, pp)
uplim = pp[max(which(a2 > (alpha/2)))]
lowlim = pp[min(which(a2 < (1 - alpha/2)))]
}
CI = list(p = p, CI = c(lowlim, uplim), n = n, level = 1 - alpha, method = method)
}
# Log-likelihood-ratio interval:
if (method == "likelihood") {
x = round(p * n)
k = -qchisq(1 - alpha, 1)/2
pp = seq(1e-06, 0.999999, length = 1e+05)
lik = dbinom(x, size = n, pp)
logLR = log(lik/max(lik))
conf.int = range(pp[logLR > k])
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Jeffreys prior interval:
if (method == "Jeffreys") {
x = round(p * n)
conf.int = qbeta(c(alpha/2, 1 - alpha/2), x + 0.5, n - x + 0.5)
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
# Agresti-Coull (adding z?/2 successes) interval (see:
# http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method == "Agresti-Coull") {
x = round(p * n)
tr = z^2
suc = tr/2
pp = (x + suc)/(n + tr)
se = sqrt(pp * (1 - pp)/(n + tr))
CI = list(p = p, CI = c((pp - z * se), (pp + z * se)), n = n, level = 1 -
alpha, method = method)
if (CI$CI[1] < 0)
CI$CI[1] = 0
if (CI$CI[2] > 1)
CI$CI[2] = 1
}
# Agresti-Coull (adding 2 successes and 2 failures) interval: (see:
# http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method == "Agresti.2_2") {
x = round(p * n)
pp = (x + 2)/(n + 4)
se = sqrt(pp * (1 - pp)/(n + 4))
CI = list(p = p, CI = c((pp - z * se), (pp + z * se)), n = n, level = 1 -
alpha, method = method)
if (CI$CI[1] < 0)
CI$CI[1] = 0
if (CI$CI[2] > 1)
CI$CI[2] = 1
}
# Logit interval:
if (method == "logit") {
lambda = log(p/(1 - p))
x = round(p * n)
V = n/(x * (n - x))
conf.int = (c(lambda - z * sqrt(V), lambda + z * sqrt(V)))
conf.int = exp(conf.int)/(1 + exp(conf.int))
CI = list(p = p, CI = c(conf.int[1], conf.int[2]), n = n, level = 1 -
alpha, method = method)
}
cat("p ? ", 100 * (1 - alpha), "%-CI = ", round(p, digits), " (", round(CI$CI[1],
digits), "; ", round(CI$CI[2], digits), ")\n", sep = "")
CI
}
prop.CI(.8, 10000)
prop.CI(.8, 10000, method = "asymptotic")
library(igraph)
get.adjacency(graph.formula(A+-B))
plot(graph.formula(A+-B))
summary(cars)
plot(cars)
library(igraph)
?plot.igraph
graph.adjacency
?graph.adjacency
s <- matrix(c(0, 2, 1, 0, 0, 0, 1, 2, 3), nrow = 3, ncol = 3)
s
graph.adjacency(s)
graph.adjacency(s, weighted = T)
g1 <- graph.adjacency(s, weighted = T)
g2 <- graph.adjacency(s)
plot.igraph(g1)
plot.igraph(g2)
g1 <- graph.adjacency(s, weighted = T, mode = "plus")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, directed = F)
g1 <- graph.adjacency(s, weighted = T, mode = "undirected")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1)
s
g1
g1 <- graph.adjacency(s, weighted = T, mode = "upper")
plot.igraph(g1)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1)
get.edgelist(g1)
plot.igraph(g1, arrow.mode = 2)
plot.igraph(g1, edge.arrow.mode = 2)
plot.igraph(g1, edge.arrow.mode = c(2,2,2,2,2))
plot.igraph(g1)
plot.igraph(g1, edge.curved = T)
g1 <- graph.adjacency(s, weighted = T, mode = "directed")
plot.igraph(g1, edge.curved = T)
plot.igraph(g1, edge.curved = T, edge.size = c(2,1,1,2,3))
plot.igraph(g1, edge.curved = T, edge.width = c(2,1,1,2,3))
get.edgelist(g1)
plot.igraph(g1, edge.curved = T, edge.width = c(2,1,1,2,3))
s1<-matrix(c(-1,1,0,-1,0,1,0,-1,0),nrow=3,ncol=3)
s2<-matrix(c(-1,1,1,-1,0,1,-1,-1,0),nrow=3,ncol=3)
s3<-matrix(c(-1,1,-1,-1,0,1,1,-1,0),nrow=3,ncol=3)
s4<-matrix(c(-1,0,1,0,0,1,-1,-1,0),nrow=3,ncol=3)
s5<-matrix(c(-1,1,1,-1,0,0,-1,0,0),nrow=3,ncol=3)
d1<-matrix(c(-1,1,1,1,0,1,0,0,0),nrow=3,ncol=3)
d2<-matrix(c(-1,1,1,0,0,1,0,1,0),nrow=3,ncol=3)
d3<-matrix(c(-1,1,1,1,0,0,0,0,0),nrow=3,ncol=3)
d4<-matrix(c(-1,1,1,0,0,0,0,1,0),nrow=3,ncol=3)
d5<-matrix(c(-1,1,1,0,0,1,1,0,0),nrow=3,ncol=3)
d6<-matrix(c(-1,1,1,1,0,1,1,1,0),nrow=3,ncol=3)
d7<-matrix(c(-1,1,1,1,0,1,1,0,0),nrow=3,ncol=3)
d8<-matrix(c(-1,1,1,1,0,0,1,0,0),nrow=3,ncol=3)
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/Chain%20Length/Rscripts/chains_functions.R")
library(devtools)
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/Chain%20Length/Rscripts/chains_functions.R")
get_qss<- function(chains, mode, parms, iter){
# Input: list of matrices, uniform or normal dist, parameters, and number of iterations
# Output: matrix of QSS values
# parameters is dataframe
## unif: min and max of distribution
## norm: mean and standard deviation
test <- matrix(nrow = length(chains), ncol = nrow(parms))
for(i in 1:nrow(parms)){
eigen.test <- lapply(chains, analyze_eigen, mode = mode, iter = iter,
params = parms[i,], self = 0)
qss.test <- lapply(eigen.test, function(x){
sum(x < 0) / 10000
})
test[,i] <- unlist(qss.test)
}
return(test)
}
params.n <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(1, 2, 3, 4, 5, 6, 7),
prey1 = c(0, 0, 0, 0, 0, 0, 0), prey2 = c(1, 1, 1, 1, 1, 1, 1))
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
params.u <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(10, 10, 10, 10, 5, 3, 1),
prey1 = c(-5, -1, -.1, -.01, -1, -1, -1), prey2 = c(0, 0, 0, 0, 0, 0, 0))
mot.qss.u <- get_qss(mot.lst, mode = "unif", parms = params.u, iter = 10000)
mot.lst <- list(s1, s2, s3, s4, s5, d1, d2, d3, d4, d5, d6, d7, d8)
params.n <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(1, 2, 3, 4, 5, 6, 7),
prey1 = c(0, 0, 0, 0, 0, 0, 0), prey2 = c(1, 1, 1, 1, 1, 1, 1))
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
params.u <- data.frame(pred1 = c(0, 0, 0, 0, 0, 0, 0), pred2 = c(10, 10, 10, 10, 5, 3, 1),
prey1 = c(-5, -1, -.1, -.01, -1, -1, -1), prey2 = c(0, 0, 0, 0, 0, 0, 0))
mot.qss.u <- get_qss(mot.lst, mode = "unif", parms = params.u, iter = 10000)
mot.qss
mot.qss.u
analyze_eigen
function(m, iter, mode, params, self = 0){
# Input: matrix, number of iterations, unif or norm, parameters
# Output: iter # of eigenvalues
if (mode == "unif"){
evals <- c()
for (i in 1:iter){
eig <- eigen_unif(m, params, self = self)
evals[i] <- eig
}
return(evals)
}
if (mode == "norm"){
evals <- c()
for (i in 1:iter){
eig <- eigen_norm(m, params, self = self)
evals[i] <- eig
}
return(evals)
}
}
mot.qss <- get_qss(mot.lst, mode = "norm", parms = params.n, iter = 10000)
eigen_unif
eigen_norm
library(vegan)
permatfull
?permatfull
m <- matrix(rbinom(9), nrow = 3, ncol = 3)
m <- matrix(rbinom(9, 1), nrow = 3, ncol = 3)
m <- matrix(rbinom(9, 1, .5), nrow = 3, ncol = 3)
m
permatfull(m)
permatswap(m)
plot(permatswap(m))
lynx
plot(lynx)
precip
head(precip)
trees
presidents
cars
mtcars
library(igraph)
library(NetIndices)
library(reshape2)
library(ggplot2)
library(devtools)
library(vegan)
### Load functions       --------------------------------------------------
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
### Import food web data  --------------------------------------------------
inputs <- get_webs("~/Dropbox/Food Web Database/Food_Web/Edgelist")
web.graphs <- inputs$graph.list
web.matrices <- inputs$adjacency.list
webnames <- inputs$webnames
### Set Working Directory     --------------------------------------------------
setwd("~/Desktop/GitHub/Ecological-Networks/Food Webs")
fw.indices <- read.csv("Tables/FWindices.csv", row.names = 1)
biplot(princomp(fw.indices))
princomp(fw.indices)$loadings
fw.indices
motif.df <- read.table("Tables/motifCOUNTS.csv", header = T, sep = ",", row.names = 1)
sub.counts <- motif.df[,2:14]
row.names(sub.counts) <- motif.df[,1]
alt.sub.counts <- sub.counts[-c(12, 18, 28),]
pca.mot <- princomp(alt.sub.counts)
loadings(pca.mot)
plot(predict(pca.mot)[,1:2])
biplot(pca.mot, cex = c(.5, .75), pc.biplot = T)
alt.sub.counts
pca.mot <- princomp(sub.counts)
loadings(pca.mot)
biplot(pca.mot, cex = c(.5, .75), pc.biplot = T)
z.norm <- read.csv("Tables/zscore_both.csv", row.names = 1)
boxplot(z.norm)
sub.counts
fw.indices
sub.counts
which(sum(sub,counts[,6:14]) == 0)
which(sum(sub.counts[,6:14]) == 0)
which(sum(sub.counts[,6:13]) == 0)
sum(sub.counts[,6:13])
sub.counts[,6:13]
which(rowSums(sub.counts[,6:13]) == 0)
which(rowSum(sub.counts[,6:13]) == 0)
which(rowSums(sub.counts[,6:13]) == 0)
rowSums(sub.counts[,6:13])
which(as.numeric(rowSums(sub.counts[,6:13])) == 0)
boxplot(z.norm[-zeros,])
zeros <- which(as.numeric(rowSums(sub.counts[,6:13])) == 0)
boxplot(z.norm[-zeros,])
fw.indices[-zeros,]
fw.indices[zeros]
fw.indices[zeros,]
boxplot(z.norm[zeros,])
boxplot(z.norm)
