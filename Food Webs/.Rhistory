length(sequ)
sequ <- seq(1, 300, .5)
length(sequ)
sequ <- seq(1, 300, .25)
length(sequ)
test <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
test <- test + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
test <- test + geom_line(aes(x = sequ[1:1095], y = dlnorm(sequ[1:1095], 1.705482, 1.60920)),
colour = "blue")
test
degdisfit <- fitdistr(degrees, "lognormal")
degdisfit
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green")
)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]], degdisfit[[2]])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
sequ[1:1095] ^ -degdispow$alpha
degdisfit[[1]]
degdisfit[[2]]))
degdisfit[[meanlog]]
degdisfit[["meanlog"]]
degdisfit$sdlog
degdisfit
degdisfit[[1]][1]
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = sequ[1:1095] ^ -degdispow$alpha, colour = "green"),
xlim = c(0,.25))
dd
dd + scale_y_continuous(limits = c(0, 0.25))
dd + scale_y_continuous(limits = c(0, 0.15))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 10*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 25*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 25*sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12))
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
for (i in 1:228){
gind <- GenInd(get.adjacency(location.g[[i]]))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]])))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- rbind(web.props1, web.props)
}
print(web.props1)
i=1
gind <- GenInd(get.adjacency(location.g[[i]]))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]])))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- data.frame()
for (i in 1:228){
gind <- GenInd(get.adjacency(location.g[[i]], sparse = F))
diam <- diameter(location.g[[i]])
avpath <- average.path.length(location.g[[i]])
cluster <- transitivity(location.g[[i]])
cannibals <- sum(diag(get.adjacency(location.g[[i]], sparse = F)))
degrees <- degree(location.g[[i]], mode = "all")
indegrees <- degree(location.g[[i]], mode = "in")
outdegrees <- degree(location.g[[i]], mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal,
Top = top, Int = int)
web.props1 <- rbind(web.props1, web.props)
}
print(web.props1)
hist(web.props1$N)
hist(web.props1$C)
plot(web.props$N, web.props$C)
web.props$N
1
plot(web.props1$N, web.props1$C)
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)])
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(0, 250))
abline(v=10)
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = seq(10, 250, 10))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250))
plot(web.props1$N[which(web.props1$N > 10)], web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250), xlab = "N", ylab = "C")
hist(web.props1$C)
hist(web.props1$N)
hist(web.props1$N, breaks = seq(0, 250, 10))
plot(log(web.props1$N[which(web.props1$N > 10)]), web.props1$C[which(web.props1$N > 10)], xlim = c(10, 250), xlab = "N", ylab = "C")
plot(log(web.props1$N[which(web.props1$N > 10)]), web.props1$C[which(web.props1$N > 10)], xlab = "N", ylab = "C")
lm(web.props1$C[which(web.props1$N > 10)]~log(web.props1$N[which(web.props1$N > 10)]))
ggplot(web.props1, geom_hist(aes(x = N)))
ggplot(web.props1, geom_histogram(aes(x = N)))
ggplot(web.props1) +geom_histogram(aes(x = N))
ggplot(web.props1) + geom_histogram(aes(x = N), binwidth = 5)
ggplot(web.props1, aes(x = web.props1$N[which(web.props1$N > 10)], y = web.props1$C[which(web.props1$N > 10)]))
ggplot(web.props1, aes(x = N[which(web.props1$N > 10)], y = C[which(web.props1$N > 10)]))
ggplot(web.props1, aes(x = N, y = C))
ggplot(web.props1) + geom_point(aes(x = N, y = C))
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
degrees <- degree(SOgraph, mode = "all")
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
dd
fitdistr(degrees, "poisson")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98)#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98))#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dpois(sequ[1:1095], 18.98)),#degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dpois(sequ[1:1095], 18.98)
fitdistr(degrees, "poisson")
hist(degrees, freq = F)
points(dpois(1:250, 18.986), typ = "l")
?dpois
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
s.ocean <- read.csv("~/Downloads/diet.csv")
m <- split(s.ocean, f = s.ocean$LOCATION)
location.g <- list()
for (i in 1:length(levels(s.ocean$LOCATION))){
el.df <- data.frame(pred = m[[i]]$PREDATOR_NAME, prey = m[[i]]$PREY_NAME)
g <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
location.g[[i]] <- g
}
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
r levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[95]
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
levels(s.ocean$LOCATION)[165]
levels(s.ocean$LOCATION)[53]
levels(s.ocean$LOCATION)[170]
s.ocean$LOCATION
levels(s.ocean$LOCATION)
levels(s.ocean$LOCATION)[20]
levels(s.ocean$LOCATION)[144]
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
?strsplit
strsplit(levels(s.ocean$LOCATION)[144], split = ".")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)[10]
as.character(levels(s.ocean$LOCATION)[165])
as.character(levels(s.ocean$LOCATION)[10])
is.character(levels(s.ocean$LOCATION)[10])
levels(s.ocean$LOCATION)
strsplit(levels(s.ocean$LOCATION), split = ".")
as.character(levels(s.ocean$LOCATION)[144])
strsplit(as.character(levels(s.ocean$LOCATION)[144]), split = ".")
s.ocean <- read.csv("~/Downloads/diet.csv")
levels(s.ocean$LOCATION)[144]
levels(s.ocean$LOCATION)
h<-levels(s.ocean$LOCATION)
is.character(h)
length(h)
strsplit(h)
strsplit(h, split = "")
h[200]
library(stringr)
x <- "1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(h,x,"")
h
h[228]
?split
?is.string
str_split(h[228],".")
nchar(h[228])
is.character(h[228])
levels(s.ocean$LOCATION)[144]
require(igraph)
require(NetIndices)
require(reshape2)
require(ggplot2)
require(devtools)
require(vegan)
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
rm(x)
rm(h)
el.df <- data.frame(pred = s.ocean$PREDATOR_NAME, prey = s.ocean$PREY_NAME)
SOgraph <- graph.edgelist(unique(as.matrix(el.df[,1:2])))
SOadjacency <- get.adjacency(SOgraph, sparse = F)
gind <- GenInd(SOadjacency)
diam <- diameter(SOgraph)
avpath <- average.path.length(SOgraph)
cluster <- transitivity(SOgraph)
cannibals <- sum(diag(SOadjacency))
degrees <- degree(SOgraph, mode = "all")
indegrees <- degree(SOgraph, mode = "in")
outdegrees <- degree(SOgraph, mode = "out")
numBas <- length(indegrees[which(indegrees == 0)])
numTop <- length(outdegrees[which(outdegrees == 0)])
basal <- (numBas/gind$N) * 100
top <- (numTop/gind$N) * 100
int <- ((gind$N - (numBas + numTop))/gind$N) * 100
web.props <- data.frame(N = gind$N, L = gind$Ltot, LD = gind$LD, C = gind$C, D = diam,
AvgPath = avpath, ClCoef = cluster, Can = cannibals, Bas = basal, Top = top, Int = int)
web.props
tind <- TrophInd(SOadjacency)
which(tind$TL == 1)
length(tind$TL)
tind[which(tind$TL == 1),]
tind[which(round(tind$TL) == 1),]
length(tind[which(round(tind$TL) == 1),])
nrow(tind[which(round(tind$TL) == 1),])
177/1095
print(web.props)
names(tind[which(round(tind$TL) == 1),])
rownames(tind[which(round(tind$TL) == 1),])
library(taxize)
specieslist <- rownames(tind[which(round(tind$TL) == 1),])
classification(specieslist, db = "itis")
testclas<- classification(specieslist[1:5], db = "itis")
testclas
library(RCurl)
url <- getURL("https://raw.github.com/bw4sz/IntroR/master/05-DataExploration/Traits.csv")
traits <- read.csv(text = url)
traits
head(traits)
require(ggplot2)
traits <- read.csv(text = url, rownames = 1)
traits <- read.csv(text = url, row.names = 1)
head(traits)
require(ggplot2)
?table
table(traits$Genus~traits$Clade)
table(traits$Genus,traits$Clade)
?range
head(trait)
head(traits)
table(Clade, Genus, data = traits)
table(traits$Clade, traits$Genus)
head(traits)
which.max(traits$Bill)
traits[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
traits[which.max(traits$Bill),]$Clade
traits$Genus[which.max(traits$Bill)]
traits[which.max(traits$Bill),]
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
source('~/.active-rstudio-document', echo=TRUE)
qplot(tind$TL, binwidth = .25, geom = "histogram",
xlab = "Trophic Position", ylab = "Frequency")
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
degdisfit
degrees
degrees <- degree(SOgraph, mode = "all")
degrees
degdisfit <- fitdistr(degrees, "lognormal")
degdispow <- power.law.fit(degrees, force.continuous = T)
dd <- ggplot(data.frame(degrees = degrees), aes(x = degrees))
dd <- dd + geom_histogram(aes(y=..density..), binwidth = 5, colour = "black", fill = "white")
dd
sequ <- seq(1, 300, .25)
dd <- dd + geom_line(aes(x = sequ[1:1095],
y = dlnorm(sequ[1:1095], degdisfit[[1]][1], degdisfit[[1]][2])),
colour = "blue")
dd <- dd + geom_line(aes(x = sequ[1:1095], y = 20 * sequ[1:1095] ^ -degdispow$alpha, colour = "green"))
dd + scale_y_continuous(limits = c(0, 0.12)) + theme(legend.position = "none")
ggplot(web.props1) + geom_point(aes(x = N, y = C))
ggplot(web.props1) + geom_point(aes(x = N, y = C)) + geom_smooth()
ggplot(web.props1, aes(x = N, y = C)) + geom_point() + geom_smooth()
?geom_smooth
nn[,1]
nn[,1:3]
ggplot(data = nn) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(x = 1:228, y = nn[1,])
ggplot(data = data.frame(nn)) + geom_bar(aes(x = 1:228, y = nn[1,]))
data.frame(nn[,1:5])
ggplot(data = web.props) + geom_bar(aes(y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas))
ggplot(data = web.props) + geom_bar(aes(x = 1:228, y = Bas)) +geom_bar(aes(x=1:228, y = Int))
pSO <- permatfull(SOadjacency, fixedmar = "row", mtype = "prab", times = 100)
fw.indices <- read.csv("Tables/FWindices.csv", row.names = 1)
library(igraph)
library(NetIndices)
library(reshape2)
library(ggplot2)
library(devtools)
library(vegan)
### Load functions       --------------------------------------------------
url <- "https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R"
source_url(url)
### Import food web data  --------------------------------------------------
inputs <- get_webs("~/Dropbox/Food Web Database/Food_Web/Edgelist")
web.graphs <- inputs$graph.list
web.matrices <- inputs$adjacency.list
webnames <- inputs$webnames
### Set Working Directory     --------------------------------------------------
setwd("~/Desktop/GitHub/Ecological-Networks/Food Webs")
### Calculate common food web indices/statistics  ----------------------------
#fw.indices <- get_fw_indices(web.matrices, web.graphs, webnames)
#fw.indices[1:2,]
#write.csv(fw.indices, file = "Tables/FWindices.csv")
fw.indices <- read.csv("Tables/FWindices.csv", row.names = 1)
N <- fw.indices$N
L <- fw.indices$Ltot
list_erg <- function(n, l, times = 1000, loops = TRUE){
erg <- list()
for(i in 1:times){
erg[[i]] <-  erdos.renyi.game(n, l, "gnm", directed = TRUE, loops = loops)
}
}
erg <- list_erg(N[1], L[1])
merg <- motif_counter(erg, webs = 1:100)[,2:14]
list_erg <- function(n, l, times = 1000, loops = TRUE){
erg <- list()
for(i in 1:times){
erg[[i]] <-  erdos.renyi.game(n, l, "gnm", directed = TRUE, loops = loops)
}
return(erg)
}
erg <- list_erg(N[1], L[1])
merg <- motif_counter(erg, webs = 1:100)[,2:14]
merg
?stop
erg_counter <- function(N, L, times = 1000, loops = TRUE, webs = NA){
if(!length(N) == length(L)){
stop("N and L vectors not of same length")
}
if(webs = NA){
webs <- 1:times
}
mot.ergs <- list()
for(fw in 1:legnth(N)){
ergs <- list_erg(N[fw], L[fw], times = times, loops = loops)
mot.ergs[[fw]] <- motif_counter(ergs, webs = webs)[,2:14]
}
}
erg_counter <- function(N, L, times = 1000, loops = TRUE, webs = NA){
if(!length(N) == length(L)){
stop("N and L vectors not of same length")
}
if(webs == NA){
webs <- 1:times
}
mot.ergs <- list()
for(fw in 1:length(N)){
ergs <- list_erg(N[fw], L[fw], times = times, loops = loops)
mot.ergs[[fw]] <- motif_counter(ergs, webs = webs)[,2:14]
}
}
testerg <- erg_counter(N, L)
erg_counter <- function(N, L, times = 1000, loops = TRUE, webs = NULL){
if(!length(N) == length(L)){
stop("N and L vectors not of same length")
}
if(webs == NULL){
webs <- 1:times
}
mot.ergs <- list()
for(fw in 1:length(N)){
ergs <- list_erg(N[fw], L[fw], times = times, loops = loops)
mot.ergs[[fw]] <- motif_counter(ergs, webs = webs)[,2:14]
}
}
testerg <- erg_counter(N, L)
webs = NULL
webs
webs
webs == NULL
webs == "NULL"
webs = "NONE"
webs == "NONE"
rm(webs)
erg_counter <- function(N, L, times = 1000, loops = TRUE, webs = "NONE"){
if(!length(N) == length(L)){
stop("N and L vectors not of same length")
}
if(webs == "NONE"){
webs <- 1:times
}
mot.ergs <- list()
for(fw in 1:length(N)){
ergs <- list_erg(N[fw], L[fw], times = times, loops = loops)
mot.ergs[[fw]] <- motif_counter(ergs, webs = webs)[,2:14]
}
}
testerg <- erg_counter(N, L)
